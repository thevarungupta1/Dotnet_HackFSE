using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Outreach.Reporting.Business.Interfaces;
using Outreach.Reporting.Business.Processors;
using Outreach.Reporting.Data.Entities;
using Outreach.Reporting.Data.Interfaces;
using Outreach.Reporting.Data.Repository;
using Swashbuckle.AspNetCore.Swagger;

namespace Outreach_Reporting_System
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<ReportDBContext>(options =>
        options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_2);

            //services.AddDbContext<ReportContext>(options => options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
            //services.AddIdentity<ApplicationUsers, IdentityRole>()
            //    .AddEntityFrameworkStores<ReportContext>()
            //    .AddDefaultTokenProviders();

            services.AddCors();

            string securityKey = "this_is_our_super_long_security_key_for_outreach_reporting_system_project_2019_03_10$";
            var symmetricSecurityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(securityKey));
            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultSignInScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, x =>
            {
                //x.RequireHttpsMetadata = false;
                // x.SaveToken = true;
                x.TokenValidationParameters = new TokenValidationParameters
                {
                    //what to validate
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateIssuerSigningKey = true,
                    //setup validate data
                    ValidIssuer = "outreachReportingSystem",
                    ValidAudience = "reportUsers",
                    IssuerSigningKey = symmetricSecurityKey
                };
            });

            //services.AddSwaggerGen(c =>
            //{
            //    //The generated Swagger JSON file will have these properties.
            //    c.SwaggerDoc("v1", new Info
            //    {
            //        Title = "Outreach Reporting System",
            //        Version = "v1",
            //    });

            //    //Locate the XML file being generated by ASP.NET...
            //    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
            //    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

            //    //... and tell Swagger to use those XML comments.
            //    c.IncludeXmlComments(xmlPath);
            //});

            services.AddTransient<IAssociateProcessor, AssociateProcessor>();
            services.AddTransient<IEventProcessor, EventProcessor>();
            services.AddTransient<IEnrollmentProcessor, EnrollmentProcessor>();
            services.AddTransient<IUserProcessor, UserProcessor>();
            services.AddTransient<IAuthProcessor, AuthProcessor>();
            services.AddTransient<IFileProcessor, FileProcessor>();
            services.AddTransient<IReportFilterProcessor, ReportFilterProcessor>();
            services.AddTransient<IUnitOfWork, UnitOfWork>();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            app.UseCors(builder =>
                builder.WithOrigins("http://localhost:4200")
                    .AllowAnyHeader()
                );
            //app.UseCors(builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader().AllowCredentials());

            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseAuthentication();
            app.UseHttpsRedirection();
            app.UseMvc();

            //This line enables the app to use Swagger, with the configuration in the ConfigureServices method.
            //app.UseSwagger();

            //This line enables Swagger UI, which provides us with a nice, simple UI with which we can view our API calls.
            //app.UseSwaggerUI(c =>
            //{
            //    c. SwaggerEndpoint("/swagger/v1/swagger.json", "Outreach Reporting System");
            //});

        }
    }
}
